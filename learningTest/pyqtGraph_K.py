# -*- coding: utf-8 -*-
import numpy as np
# Form implementation generated from reading ui file 'pyqtGraph_K.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pyqtgraph as pg
import akshare as ak
import sys
import json
import numpy as np
from typing import Dict,Any
from PyQt5.QtCore import Qt
import pyqtgraph as pg
import pyqtgraph.examples

pg.setConfigOption('background','k')
pg.setConfigOption('foreground','w')


# 蜡烛控件
class CandlestickItem(pg.GraphicsObject):
    def __init__(self, data):
        pg.GraphicsObject.__init__(self)
        self.data = data  # data must have fields: time, open, close, min, max
        self.generatePicture()

    def generatePicture(self):
        #  pre-computing a QPicture object allows paint() to run much more quickly,
        #  rather than re-drawing the shapes every time
        self.picture = QtGui.QPicture()
        p = QtGui.QPainter(self.picture)
        p.setPen(pg.mkPen('d'))
        w = (self.data[1][0] - self.data[0][0]) / 3.
        for (t, open, close, min, max) in self.data:
            p.drawLine(QtCore.QPointF(t, min), QtCore.QPointF(t, max))
            if open > close:
                p.setBrush(pg.mkBrush('r'))
            else:
                p.setBrush(pg.mkBrush('g'))
            p.drawRect(QtCore.QRectF(t - w, open, w * 2, close - open))
        p.end()

        def paint(self, p, *args):
            p.drawPicture(0, 0, self.picture)

        def boundingRect(self):
            #  boundingRect _must_ indicate the entire area that will be drawn on
            #  or else we will get artifacts and possibly crashing.
            #  (in this case, QPicture does all the work of computing the bouning rect for us)
            return QtCore.QRectF(self.picture.boundingRect())


#  日期横轴控件
class RotateAxisItem(pg.AxisItem):
    def drawPicture(self, p, axisSpec, tickSpecs, textSpecs):
        p.setRenderHint(p.Antialiasing, False)
        p.setRenderHint(p.TextAntialiasing, True)

        # draw long line along axis
        pen, p1, p2 = axisSpec
        p.setPen(pen)
        p.drawLine(p1, p2)
        p.translate(0.5, 0)  # resolves some damn pixel ambiguity

        # draw ticks
        for pen, p1, p2 in tickSpecs:
            p.setPen(pen)
            p.drawLine(p1, p2)

        # draw all text
        # if self.tickFont is not None:
        # p.setFont(self.tickFont)
        p.setPen(self.pen())
        for rect, flags, text in textSpecs:
            # this is the important part
            p.save()
            p.translate(rect.x(), rect.y())
            p.rotate(-30)
            p.drawText(-rect.width(), rect.height(), rect.width(), rect.height(), flags, text)
            # restoring the painter is *required*!!!
            p.restore()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1436, 872)
        # pg.setConfigOptions(leftButtonPan=False)
        # pg.setConfigOption('background', 'w')
        # pg.setConfigOption('foreground', 'k')
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widge_k = QtWidgets.QWidget(self.centralwidget)
        self.widge_k.setGeometry(QtCore.QRect(110, 40, 1101, 391))
        self.widge_k.setObjectName("widge_k")
        self.widget_vol = QtWidgets.QWidget(self.centralwidget)
        self.widget_vol.setGeometry(QtCore.QRect(110, 460, 1101, 171))
        self.widget_vol.setObjectName("widget_vol")
        self.widget_kdj = QtWidgets.QWidget(self.centralwidget)
        self.widget_kdj.setGeometry(QtCore.QRect(110, 660, 1101, 171))
        self.widget_kdj.setObjectName("widget_kdj")
        self.label_k = QtWidgets.QLabel(self.centralwidget)
        self.label_k.setGeometry(QtCore.QRect(110, 10, 1321, 30))
        self.label_k.setObjectName("label_k")
        self.label_vol = QtWidgets.QLabel(self.centralwidget)
        self.label_vol.setGeometry(QtCore.QRect(110, 430, 1321, 30))
        self.label_vol.setObjectName("label_vol")
        self.label_kdj = QtWidgets.QLabel(self.centralwidget)
        self.label_kdj.setGeometry(QtCore.QRect(110, 630, 1321, 30))
        self.label_kdj.setObjectName("label_kdj")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1436, 30))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # 所有金融期货(中金所主力合约)具体合约
        cffex_text = ak.match_main_contract(symbol="cffex")
        # class 'str' -> class 'list'
        cffex_text = cffex_text.split(',')
        futures_zh_minute_sina_df = ak.futures_zh_minute_sina(symbol=cffex_text[0], period="1")
        self.drawLine = CandlestickItem(data=futures_zh_minute_sina_df).DrawKline()
        self.widge_k.setWidget(self.drawLine)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_k.setText(_translate("MainWindow", "K线图"))
        self.label_vol.setText(_translate("MainWindow", "Vol"))
        self.label_kdj.setText(_translate("MainWindow", "KDJ"))


if __name__ == '__main__':
   app = QtWidgets.QApplication(sys.argv)
   MainWindow = QtWidgets.QMainWindow() # 创建窗体对象
   ui = Ui_MainWindow() # 创建PyQt设计的窗体对象
   ui.setupUi(MainWindow) # 调用PyQt窗体的方法对窗体对象进行初始化设置
   MainWindow.show() # 显示窗体
   sys.exit(app.exec_()) # 程序关闭时退出进程
